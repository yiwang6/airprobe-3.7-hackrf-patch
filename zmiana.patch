diff --git a/gsm-receiver/Makefile.common b/gsm-receiver/Makefile.common
index b5dcb2e..0592f70 100644

  b/gsm-receiver/Makefile.common
@@ -28,7 +28,7 @@ AM_CPPFLAGS = \
 	$(STD_DEFINES_AND_INCLUDES) \
 	$(PYTHON_CPPFLAGS) \
 	$(CPPUNIT_INCLUDES) \
 	$(GNURADIO_RUNTIME_CPPFLAGS)
 
 #!! remove this
 TCH_DECODER_INCLUDEDIR = $(top_srcdir)/src/lib/decoder/openbtsstuff
@@ -36,9 +36,8 @@ TCH_DECODER_INCLUDEDIR = $(top_srcdir)/src/lib/decoder/openbtsstuff
 STD_DEFINES_AND_INCLUDES = \
 	-I$(DECODER_INCLUDEDIR) \
 	-I$(MAIN_INCLUDEDIR) \
 	-I$(GNURADIO_RUNTIME_INCLUDEDIR) \
 	-I$(GNURADIO_RUNTIME_INCLUDEDIR)/gnuradio/swig \
 	$(LIBOSMOCORE_CFLAGS)  \
 	-I$(TCH_DECODER_INCLUDEDIR)
 
diff --git a/gsm-receiver/config/gr_libgnuradio_core_extra_ldflags.m4 b/gsm-receiver/config/gr_libgnuradio_core_extra_ldflags.m4
index 43f872c..92e8c97 100644
    b/gsm-receiver/config/gr_libgnuradio_core_extra_ldflags.m4
@@ -20,21 +20,21 @@
 # Boston, MA 02110-1301, USA.
 
 dnl
 AC_DEFUN([GR_LIBGNURADIO_RUNTIME_EXTRA_LDFLAGS], [
 AC_REQUIRE([AC_PROG_LD])
 # on Mingw32 extra LDFLAGS are required to ease global variable linking
 LIBGNURADIO_RUNTIME_EXTRA_LDFLAGS=""
 
 AC_MSG_CHECKING([whether $LD accepts --enable-runtime-pseudo-reloc])
 if ${LD} --enable-runtime-pseudo-reloc --version >/dev/null 2>&1
 then
         # libtool requires the quotes
         LIBGNURADIO_RUNTIME_EXTRA_LDFLAGS="\"-Wl,--enable-runtime-pseudo-reloc\""
         AC_MSG_RESULT(yes)
 else
         AC_MSG_RESULT(no)
 fi
 
 AC_SUBST(LIBGNURADIO_RUNTIME_EXTRA_LDFLAGS)
 
 ])
diff --git a/gsm-receiver/config/gr_standalone.m4 b/gsm-receiver/config/gr_standalone.m4
index 4e097d2..6a1594b 100644
    b/gsm-receiver/config/gr_standalone.m4
@@ -114,7 +114,6 @@ m4_define([GR_STANDALONE],
   AC_CHECK_PROG([XMLTO],[xmlto],[yes],[])
   AM_CONDITIONAL([HAS_XMLTO], [test x$XMLTO = xyes])
 
   PKG_CHECK_MODULES(GNURADIO_RUNTIME, gnuradio-runtime >= 3.7)
   LIBS="$LIBS $GNURADIO_RUNTIME_LIBS"
 ])
diff --git a/gsm-receiver/src/lib/Makefile.swig.gen b/gsm-receiver/src/lib/Makefile.swig.gen
index 20074ef..60e806d 100644
    b/gsm-receiver/src/lib/Makefile.swig.gen
@@ -250,9 +250,3 @@ $(DEPDIR)/gsm-generate-stamp:
 ## to continue.
 ##
 	touch $(DEPDIR)/gsm-generate-stamp
diff --git a/gsm-receiver/src/lib/gsm.i b/gsm-receiver/src/lib/gsm.i
index b3c1d81..8c97921 100644
    b/gsm-receiver/src/lib/gsm.i
@@ -33,7 +33,8 @@
 /* %include "gsm_constants.h" */
 
 %{
 #include <gnuradio_swig_bug_workaround.h>	// mandatory bug fix
 #include <gnuradio/py_feval.h>
 #include "gsm_receiver_cf.h"
 #include <stdexcept>
 /* #include "gsm_constants.h" */
@@ -43,12 +44,12 @@
 
 GR_SWIG_BLOCK_MAGIC(gsm,receiver_cf);
 
 gsm_receiver_cf_sptr gsm_make_receiver_cf ( gr::feval_dd *tuner, gr::feval_dd *synchronizer, int osr, std::string key, std::string configuration);
 
 class gsm_receiver_cf : public gr::block
 {
 private:
   gsm_receiver_cf ( gr::feval_dd *tuner, gr::feval_dd *synchronizer, int osr);
 };
 
 // ----------------------------------------------------------------
diff --git a/gsm-receiver/src/lib/gsm_constants.h b/gsm-receiver/src/lib/gsm_constants.h
index b4b8678..39ea1d4 100644
    b/gsm-receiver/src/lib/gsm_constants.h
@@ -30,7 +30,7 @@
 
 #define FCCH_HITS_NEEDED        (USEFUL_BITS - 4)
 #define FCCH_MAX_MISSES         1
 #define FCCH_MAX_FREQ_OFFSET    20000
 
 #define CHAN_IMP_RESP_LENGTH  5
 
diff --git a/gsm-receiver/src/lib/gsm_receiver_cf.cc b/gsm-receiver/src/lib/gsm_receiver_cf.cc
index b4e7a69..6bfdf5d 100644
    b/gsm-receiver/src/lib/gsm_receiver_cf.cc
@@ -24,8 +24,8 @@
 #include "config.h"
 #endif
 
 #include <gnuradio/io_signature.h>
 #include <gnuradio/math.h>
 #include <math.h>
 #include <Assert.h>
 #include <boost/circular_buffer.hpp>
@@ -289,7 +289,7 @@ typedef std::vector<float> vector_float;
 typedef boost::circular_buffer<float> circular_buffer_float;
 
 gsm_receiver_cf_sptr
 gsm_make_receiver_cf(gr::feval_dd *tuner, gr::feval_dd *synchronizer, int osr, std::string key, std::string configuration)
 {
   return gsm_receiver_cf_sptr(new gsm_receiver_cf(tuner, synchronizer, osr, key, configuration));
 }
@@ -302,10 +302,10 @@ static const int MAX_OUT = 1; // maximum number of output streams
 /*
  * The private constructor
  */
 gsm_receiver_cf::gsm_receiver_cf(gr::feval_dd *tuner, gr::feval_dd *synchronizer, int osr, std::string key, std::string configuration)
     : gr::block("gsm_receiver",
                gr::io_signature::make(MIN_IN, MAX_IN, sizeof(gr_complex)),
                gr::io_signature::make(MIN_OUT, MAX_OUT, 142 * sizeof(float))),
     d_OSR(osr),
     d_chan_imp_length(CHAN_IMP_RESP_LENGTH),
     d_tuner(tuner),
@@ -751,7 +751,7 @@ void gsm_receiver_cf::set_frequency(double freq_offset)
 inline float gsm_receiver_cf::compute_phase_diff(gr_complex val1, gr_complex val2)
 {
   gr_complex conjprod = val1 * conj(val2);
   return gr::fast_atan2f(imag(conjprod), real(conjprod));
 }
 
 bool gsm_receiver_cf::reach_sch_burst(const int nitems)
diff --git a/gsm-receiver/src/lib/gsm_receiver_cf.h b/gsm-receiver/src/lib/gsm_receiver_cf.h
index 039a774..88a742a 100644
    b/gsm-receiver/src/lib/gsm_receiver_cf.h
@@ -24,9 +24,12 @@
 
 #include <vector>
 #include <list>
 #include <gnuradio/block_gateway.h>
 #include <gnuradio/tagged_stream_block.h>
 #include <gnuradio/sync_decimator.h>
 #include <gnuradio/sync_interpolator.h>
 #include <gnuradio/gr_complex.h>
 #include <gnuradio/feval.h>
 #include <gsm_constants.h>
 #include <gsm_receiver_config.h>
 
@@ -42,7 +45,7 @@ class gsm_receiver_cf;
 typedef boost::shared_ptr<gsm_receiver_cf> gsm_receiver_cf_sptr;
 typedef std::vector<gr_complex> vector_complex;
 
 gsm_receiver_cf_sptr gsm_make_receiver_cf(gr::feval_dd *tuner, gr::feval_dd *synchronizer, int osr, std::string key, std::string configuration);
 
 /** GSM Receiver GNU Radio block
  *
@@ -52,7 +55,7 @@ gsm_receiver_cf_sptr gsm_make_receiver_cf(gr_feval_dd *tuner, gr_feval_dd *synch
  * \ingroup block
  */
 
 class gsm_receiver_cf : public gr::block
 {
   private:
     std::map<char,int> d_hex_to_int;
@@ -76,8 +79,8 @@ class gsm_receiver_cf : public gr_block
     gr_complex d_sch_training_seq[N_SYNC_BITS]; ///<encoded training sequence of a SCH burst
     gr_complex d_norm_training_seq[TRAIN_SEQ_NUM][N_TRAIN_BITS]; ///<encoded training sequences of a normal bursts and dummy bursts
 
     gr::feval_dd *d_tuner; ///<callback to a python object which is used for frequency tunning
     gr::feval_dd *d_synchronizer; ///<callback to a python object which is used to correct offset of USRP's internal clock
 
     /** Countes samples consumed by the receiver
      *
@@ -120,8 +123,8 @@ class gsm_receiver_cf : public gr_block
     // GSM Stack
     GS_CTX d_gs_ctx;//TODO: remove it! it'a not right place for a decoder
 
     friend gsm_receiver_cf_sptr gsm_make_receiver_cf(gr::feval_dd *tuner, gr::feval_dd *synchronizer, int osr, std::string key, std::string configuration);
     gsm_receiver_cf(gr::feval_dd *tuner, gr::feval_dd *synchronizer, int osr, std::string key, std::string configuration);
 
     /** Function whis is used to search a FCCH burst and to compute frequency offset before
      * "synchronized" state of the receiver
diff --git a/gsm-receiver/src/python/gsm_receive.py b/gsm-receiver/src/python/gsm_receive.py
index e66ddf9..0b9090c 100755
    b/gsm-receiver/src/python/gsm_receive.py
@@ -1,7 +1,6 @@
 #!/usr/bin/env python
 
 from gnuradio import gr, blocks, filter
 from gnuradio.eng_option import eng_option
 from optparse import OptionParser
 from os import sys
@@ -15,9 +14,9 @@ class tuner(gr.feval_dd):
     def __init__(self, top_block):
         gr.feval_dd.__init__(self)
         self.top_block = top_block
     def eval(self, freq_offset):
         self.top_block.set_center_frequency(freq_offset)
         return freq_offset
 
 class synchronizer(gr.feval_dd):
     def __init__(self, top_block):
@@ -26,7 +25,7 @@ class synchronizer(gr.feval_dd):
 
     def eval(self, timing_offset):
         self.top_block.set_timing(timing_offset)
         return timing_offset
 
 class gsm_receiver_first_blood(gr.top_block):
     def __init__(self):
@@ -48,12 +47,12 @@ class gsm_receiver_first_blood(gr.top_block):
   
     def _set_sink(self):
         nazwa_pliku_wy = self.options.outputfile
         ujscie = blocks.file_sink(gr.sizeof_float, nazwa_pliku_wy)
         return ujscie
     
     def _set_source(self):
         nazwa_pliku = self.options.inputfile
         zrodlo = blocks.file_source(gr.sizeof_gr_complex, nazwa_pliku, False)
         return zrodlo
     
     def _set_rates(self):
@@ -65,20 +64,20 @@ class gsm_receiver_first_blood(gr.top_block):
         self.sps = self.input_rate / self.gsm_symb_rate / self.options.osr
 
     def _set_filter(self):
         filter_cutoff   = 145e3
         filter_t_width  = 10e3
         offset = 0
         #print "input_rate:", self.input_rate, "sample rate:", self.sps, " filter_cutoff:", filter_cutoff, " filter_t_width:", filter_t_width
         filter_taps = filter.firdes.low_pass(1.0, self.input_rate, filter_cutoff, filter_t_width, filter.firdes.WIN_HAMMING)
         filtr = filter.freq_xlating_fir_filter_ccf(1, filter_taps, offset, self.input_rate)
         return filtr
 
     def _set_converter(self):
         v2s = blocks.vector_to_stream(gr.sizeof_float, 142)
         return v2s
     
     def _set_interpolator(self):
         interpolator = filter.fractional_resampler_cc(0, self.sps)
         return interpolator
     
     def _set_receiver(self):
@@ -104,7 +103,7 @@ class gsm_receiver_first_blood(gr.top_block):
         return (options, args)
     
     def set_center_frequency(self, center_freq):
         self.filtr.set_center_freq(-center_freq)
 
     def set_timing(self, timing_offset):
         pass
diff --git a/gsm-receiver/src/python/gsm_receive_rtl.py b/gsm-receiver/src/python/gsm_receive_rtl.py
index 926a366..b3f37a9 100755
    b/gsm-receiver/src/python/gsm_receive_rtl.py
@@ -13,7 +13,7 @@
 
 import sys
 import math
 from gnuradio import gr, gru, eng_notation, blocks, filter
 from gnuradio.eng_option import eng_option
 from gnuradio.wxgui import fftsink2
 from gnuradio.wxgui import forms
@@ -32,7 +32,7 @@ class tune_corrector(gr.feval_dd):
         self.top_block = top_block
     def eval(self, freq_offset):
         self.top_block.offset = self.top_block.offset + int(freq_offset)
         self.top_block.tuner.set_center_freq(-self.top_block.offset)
         return freq_offset
 
 class synchronizer(gr.feval_dd):
@@ -54,12 +54,12 @@ class top_block(grc_wxgui.top_block_gui):
 
     self.tune_corrector_callback = tune_corrector(self)
     self.synchronizer_callback = synchronizer(self)
     self.converter = blocks.vector_to_stream(gr.sizeof_float, 142)
 
     self.ifreq = options.frequency
     self.rfgain = options.gain
 
     self.src = osmosdr.source(options.args)
     self.src.set_center_freq(self.ifreq)
     self.src.set_sample_rate(int(options.sample_rate))
 
@@ -82,17 +82,17 @@ class top_block(grc_wxgui.top_block_gui):
 
     self.offset = 0
 
     taps = filter.firdes.low_pass(1.0, sample_rate, 145e3, 10e3, filter.firdes.WIN_HANN)
     self.tuner = filter.freq_xlating_fir_filter_ccf(1, taps, self.offset, sample_rate)
 
     self.interpolator = filter.fractional_resampler_cc(0, sps)
 
     self.receiver = gsm.receiver_cf(
         self.tune_corrector_callback, self.synchronizer_callback, 4,
         options.key.replace(' ', '').lower(),
         options.configuration.upper())
 
     self.output = blocks.file_sink(gr.sizeof_float, options.output_file)
 
     self.connect(self.src, self.tuner, self.interpolator, self.receiver, self.converter, self.output)
 
